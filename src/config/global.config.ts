import { TExceptionMessage } from "../types/exceptionMessage.types";

export const ExceptionMessage: TExceptionMessage = {
  BadRequestError: 'Bad request',
  UnauthorizedError: 'Unauthorized',
  PaymentRequiredError: 'Payment required',
  ForbiddenError: 'Forbidden',
  NotFoundError: 'Not found',
  MethodNotAllowedError: 'Method not allowed',
  NotAcceptableError: 'Not acceptable',
  ProxyAuthenticationError: 'Proxy authentication required',
  RequestTimeoutError: 'Request timeout',
  ConflictError: 'Conflict',
  GoneError: 'Permanently removed',
  LengthRequiredError: 'Content length required',
  PreconditionFailedError: 'Can not meet request conditions',
  PayloadTooLargeError: 'Payload too large',
  UriTooLongError: 'URI too long',
  UnsupportedMediaError: 'Unsupported Media',
  RangeTooLongError: 'Out of range',
  ExpectationFailedError: 'Can not meet exception',
  TeapotError: 'I am a teapot',
  MisdirectedError: 'Misdirected',
  UnprocessableError: 'Unprocessable',
  LockedError: 'Locked',
  FailedDependencyError: 'Failed Dependency',
  TooEarlyError: 'Too Early',
  UpgradeRequiredError: 'Upgrade Required',
  PreconditionRequiredError: 'Precondition Required',
  TooManyRequestError: 'Too many request',
  RequestHeaderTooLargeError: 'Request header field too large',
  LegallyUnavilableError: 'Unavilable for legal reasons',
  InternalServerError: 'Internal server error',
  NotImplementedError: 'Not implemented',
  BadGatewayError: 'Bad gateway',
  ServiceUnavilableError: 'Service unavilable',
  GatewayTimeoutError: 'Gateway timeout',
  HttpVersionNotSupportedError: 'Http version not supported',
  VariantNegotiateError: 'Variant expects transparent negotation',
  InsufficentStorageError: 'Insufficent storage',
  LoopDetectedError: 'Loop detected',
  NotExtendedError: 'Not extended',
  NetworkAuthenticationRequiredError: 'Network authentication required'
}
